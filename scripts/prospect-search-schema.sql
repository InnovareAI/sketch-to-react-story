-- SAM AI Platform - Prospect Search Database Schema
-- Generated by Supabase Database Agent

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ============================================================================
-- SEARCH CONFIGURATIONS TABLE
-- ============================================================================
CREATE TABLE search_configurations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    user_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    search_type VARCHAR(50) NOT NULL CHECK (search_type IN (
        'basic-search', 'sales-navigator', 'recruiter-search', 
        'company-follower', 'csv-import', 'post-engagement', 
        'group-search', 'event-search', 'people-you-know'
    )),
    search_parameters JSONB NOT NULL DEFAULT '{}',
    linkedin_url TEXT,
    is_active BOOLEAN DEFAULT true,
    is_favorite BOOLEAN DEFAULT false,
    execution_count INTEGER DEFAULT 0,
    last_executed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================================================
-- COMPANY PROFILES TABLE
-- ============================================================================
CREATE TABLE company_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    linkedin_company_id VARCHAR(255) UNIQUE,
    name VARCHAR(255) NOT NULL,
    linkedin_url TEXT NOT NULL,
    industry VARCHAR(255),
    size_range VARCHAR(100),
    location VARCHAR(255),
    description TEXT,
    follower_count INTEGER,
    employee_count INTEGER,
    website_url TEXT,
    logo_url TEXT,
    metadata JSONB DEFAULT '{}',
    last_scraped_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================================================
-- PROSPECT PROFILES TABLE
-- ============================================================================
CREATE TABLE prospect_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    linkedin_profile_id VARCHAR(255),
    full_name VARCHAR(255) NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    headline VARCHAR(500),
    current_title VARCHAR(255),
    current_company VARCHAR(255),
    company_id UUID REFERENCES company_profiles(id),
    location VARCHAR(255),
    linkedin_url TEXT,
    profile_image_url TEXT,
    
    -- Contact Information
    email VARCHAR(255),
    phone VARCHAR(50),
    twitter_handle VARCHAR(100),
    website_url TEXT,
    
    -- Professional Information
    experience JSONB DEFAULT '[]',
    education JSONB DEFAULT '[]',
    skills JSONB DEFAULT '[]',
    certifications JSONB DEFAULT '[]',
    
    -- Engagement Data
    connection_count INTEGER,
    recent_activity JSONB DEFAULT '{}',
    post_engagement_score INTEGER DEFAULT 0,
    
    -- Data Quality & Status
    data_completeness_score INTEGER DEFAULT 0 CHECK (data_completeness_score >= 0 AND data_completeness_score <= 100),
    enrichment_status VARCHAR(50) DEFAULT 'pending' CHECK (enrichment_status IN ('pending', 'processing', 'completed', 'failed')),
    verification_status VARCHAR(50) DEFAULT 'unverified' CHECK (verification_status IN ('unverified', 'verified', 'invalid')),
    
    -- Source & Metadata
    source VARCHAR(50) NOT NULL CHECK (source IN ('linkedin_search', 'csv_upload', 'api_import', 'manual_entry')),
    source_details JSONB DEFAULT '{}',
    metadata JSONB DEFAULT '{}',
    
    -- Timestamps
    last_enriched_at TIMESTAMP WITH TIME ZONE,
    last_contacted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Constraints
    UNIQUE(workspace_id, linkedin_profile_id),
    UNIQUE(workspace_id, email) WHERE email IS NOT NULL
);

-- ============================================================================
-- SEARCH RESULTS TABLE
-- ============================================================================
CREATE TABLE search_results (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    search_configuration_id UUID NOT NULL REFERENCES search_configurations(id) ON DELETE CASCADE,
    prospect_profile_id UUID NOT NULL REFERENCES prospect_profiles(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL,
    
    -- Search Context
    search_position INTEGER,
    relevance_score DECIMAL(5,4) DEFAULT 0.0000,
    quality_score INTEGER DEFAULT 0 CHECK (quality_score >= 0 AND quality_score <= 100),
    
    -- Extraction Details
    extraction_method VARCHAR(50) CHECK (extraction_method IN ('brightdata', 'linkedin_api', 'csv_upload', 'manual')),
    extraction_timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    extraction_metadata JSONB DEFAULT '{}',
    
    -- Status
    processing_status VARCHAR(50) DEFAULT 'new' CHECK (processing_status IN ('new', 'processing', 'completed', 'error')),
    error_details TEXT,
    
    -- Campaign Integration
    assigned_to_campaign BOOLEAN DEFAULT false,
    campaign_assignment_date TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Constraints
    UNIQUE(search_configuration_id, prospect_profile_id)
);

-- ============================================================================
-- SEARCH HISTORY TABLE
-- ============================================================================
CREATE TABLE search_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    search_configuration_id UUID NOT NULL REFERENCES search_configurations(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL,
    user_id UUID NOT NULL,
    
    -- Execution Details
    execution_status VARCHAR(50) NOT NULL CHECK (execution_status IN ('queued', 'running', 'completed', 'failed', 'cancelled')),
    started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE,
    duration_seconds INTEGER,
    
    -- Results Summary
    total_prospects_found INTEGER DEFAULT 0,
    new_prospects_added INTEGER DEFAULT 0,
    existing_prospects_updated INTEGER DEFAULT 0,
    prospects_with_errors INTEGER DEFAULT 0,
    
    -- Cost & Usage
    estimated_cost DECIMAL(10,6) DEFAULT 0.000000,
    actual_cost DECIMAL(10,6) DEFAULT 0.000000,
    brightdata_requests INTEGER DEFAULT 0,
    api_calls_made INTEGER DEFAULT 0,
    
    -- Technical Details
    n8n_workflow_execution_id VARCHAR(255),
    brightdata_session_id VARCHAR(255),
    error_message TEXT,
    execution_metadata JSONB DEFAULT '{}',
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================================================
-- CSV UPLOAD SESSIONS TABLE
-- ============================================================================
CREATE TABLE csv_upload_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    user_id UUID NOT NULL,
    
    -- File Information
    filename VARCHAR(255) NOT NULL,
    file_size_bytes INTEGER NOT NULL,
    file_hash VARCHAR(64) NOT NULL,
    
    -- Processing Status
    processing_status VARCHAR(50) DEFAULT 'uploaded' CHECK (processing_status IN ('uploaded', 'validating', 'processing', 'completed', 'failed')),
    validation_status VARCHAR(50) DEFAULT 'pending' CHECK (validation_status IN ('pending', 'valid', 'invalid')),
    
    -- Results Summary
    total_rows INTEGER DEFAULT 0,
    valid_rows INTEGER DEFAULT 0,
    invalid_rows INTEGER DEFAULT 0,
    duplicate_rows INTEGER DEFAULT 0,
    prospects_created INTEGER DEFAULT 0,
    prospects_updated INTEGER DEFAULT 0,
    
    -- Validation Results
    validation_errors JSONB DEFAULT '[]',
    processing_errors JSONB DEFAULT '[]',
    field_mapping JSONB DEFAULT '{}',
    
    -- Processing Details
    started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE,
    processing_duration_seconds INTEGER,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================================================
-- PROSPECT CAMPAIGN ASSIGNMENTS TABLE
-- ============================================================================
CREATE TABLE prospect_campaign_assignments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    prospect_profile_id UUID NOT NULL REFERENCES prospect_profiles(id) ON DELETE CASCADE,
    campaign_id UUID NOT NULL, -- References external campaigns table
    search_result_id UUID REFERENCES search_results(id),
    
    -- Assignment Details
    assignment_method VARCHAR(50) CHECK (assignment_method IN ('manual', 'auto_bulk', 'ai_recommendation', 'rule_based')),
    assignment_reason TEXT,
    assigned_by_user_id UUID,
    
    -- Status Tracking
    status VARCHAR(50) DEFAULT 'assigned' CHECK (status IN ('assigned', 'active', 'paused', 'completed', 'removed')),
    
    -- Performance Tracking
    messages_sent INTEGER DEFAULT 0,
    responses_received INTEGER DEFAULT 0,
    meetings_booked INTEGER DEFAULT 0,
    deals_created INTEGER DEFAULT 0,
    
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_activity_at TIMESTAMP WITH TIME ZONE,
    
    -- Constraints
    UNIQUE(prospect_profile_id, campaign_id)
);

-- ============================================================================
-- ENRICHMENT QUEUE TABLE
-- ============================================================================
CREATE TABLE enrichment_queue (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL,
    prospect_profile_id UUID NOT NULL REFERENCES prospect_profiles(id) ON DELETE CASCADE,
    
    -- Enrichment Configuration
    enrichment_type VARCHAR(50) NOT NULL CHECK (enrichment_type IN ('linkedin_profile', 'email_finder', 'phone_finder', 'company_data', 'social_profiles')),
    enrichment_provider VARCHAR(50) CHECK (enrichment_provider IN ('brightdata', 'apollo', 'zoominfo', 'clearbit', 'hunter')),
    priority INTEGER DEFAULT 50 CHECK (priority >= 1 AND priority <= 100),
    
    -- Processing Status
    status VARCHAR(50) DEFAULT 'queued' CHECK (status IN ('queued', 'processing', 'completed', 'failed', 'skipped')),
    attempts INTEGER DEFAULT 0,
    max_attempts INTEGER DEFAULT 3,
    
    -- Results
    enrichment_data JSONB DEFAULT '{}',
    confidence_score DECIMAL(5,4) DEFAULT 0.0000,
    error_message TEXT,
    
    -- Scheduling
    scheduled_for TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    started_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE,
    next_retry_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Search Configurations
CREATE INDEX idx_search_configurations_workspace_id ON search_configurations(workspace_id);
CREATE INDEX idx_search_configurations_user_id ON search_configurations(user_id);
CREATE INDEX idx_search_configurations_search_type ON search_configurations(search_type);
CREATE INDEX idx_search_configurations_is_active ON search_configurations(is_active);
CREATE INDEX idx_search_configurations_is_favorite ON search_configurations(is_favorite);

-- Company Profiles
CREATE INDEX idx_company_profiles_workspace_id ON company_profiles(workspace_id);
CREATE INDEX idx_company_profiles_linkedin_company_id ON company_profiles(linkedin_company_id);
CREATE INDEX idx_company_profiles_name ON company_profiles(name);
CREATE INDEX idx_company_profiles_industry ON company_profiles(industry);

-- Prospect Profiles
CREATE INDEX idx_prospect_profiles_workspace_id ON prospect_profiles(workspace_id);
CREATE INDEX idx_prospect_profiles_linkedin_profile_id ON prospect_profiles(linkedin_profile_id);
CREATE INDEX idx_prospect_profiles_full_name ON prospect_profiles(full_name);
CREATE INDEX idx_prospect_profiles_current_company ON prospect_profiles(current_company);
CREATE INDEX idx_prospect_profiles_location ON prospect_profiles(location);
CREATE INDEX idx_prospect_profiles_email ON prospect_profiles(email);
CREATE INDEX idx_prospect_profiles_enrichment_status ON prospect_profiles(enrichment_status);
CREATE INDEX idx_prospect_profiles_verification_status ON prospect_profiles(verification_status);
CREATE INDEX idx_prospect_profiles_source ON prospect_profiles(source);
CREATE INDEX idx_prospect_profiles_data_completeness_score ON prospect_profiles(data_completeness_score);

-- Search Results
CREATE INDEX idx_search_results_search_configuration_id ON search_results(search_configuration_id);
CREATE INDEX idx_search_results_prospect_profile_id ON search_results(prospect_profile_id);
CREATE INDEX idx_search_results_workspace_id ON search_results(workspace_id);
CREATE INDEX idx_search_results_processing_status ON search_results(processing_status);
CREATE INDEX idx_search_results_quality_score ON search_results(quality_score);
CREATE INDEX idx_search_results_assigned_to_campaign ON search_results(assigned_to_campaign);

-- Search History
CREATE INDEX idx_search_history_search_configuration_id ON search_history(search_configuration_id);
CREATE INDEX idx_search_history_workspace_id ON search_history(workspace_id);
CREATE INDEX idx_search_history_user_id ON search_history(user_id);
CREATE INDEX idx_search_history_execution_status ON search_history(execution_status);
CREATE INDEX idx_search_history_started_at ON search_history(started_at);

-- CSV Upload Sessions
CREATE INDEX idx_csv_upload_sessions_workspace_id ON csv_upload_sessions(workspace_id);
CREATE INDEX idx_csv_upload_sessions_user_id ON csv_upload_sessions(user_id);
CREATE INDEX idx_csv_upload_sessions_processing_status ON csv_upload_sessions(processing_status);
CREATE INDEX idx_csv_upload_sessions_file_hash ON csv_upload_sessions(file_hash);

-- Prospect Campaign Assignments
CREATE INDEX idx_prospect_campaign_assignments_workspace_id ON prospect_campaign_assignments(workspace_id);
CREATE INDEX idx_prospect_campaign_assignments_prospect_profile_id ON prospect_campaign_assignments(prospect_profile_id);
CREATE INDEX idx_prospect_campaign_assignments_campaign_id ON prospect_campaign_assignments(campaign_id);
CREATE INDEX idx_prospect_campaign_assignments_status ON prospect_campaign_assignments(status);

-- Enrichment Queue
CREATE INDEX idx_enrichment_queue_workspace_id ON enrichment_queue(workspace_id);
CREATE INDEX idx_enrichment_queue_prospect_profile_id ON enrichment_queue(prospect_profile_id);
CREATE INDEX idx_enrichment_queue_status ON enrichment_queue(status);
CREATE INDEX idx_enrichment_queue_enrichment_type ON enrichment_queue(enrichment_type);
CREATE INDEX idx_enrichment_queue_priority ON enrichment_queue(priority);
CREATE INDEX idx_enrichment_queue_scheduled_for ON enrichment_queue(scheduled_for);

-- ============================================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE search_configurations ENABLE ROW LEVEL SECURITY;
ALTER TABLE company_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE prospect_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE search_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE search_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE csv_upload_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE prospect_campaign_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE enrichment_queue ENABLE ROW LEVEL SECURITY;

-- Search Configurations Policies
CREATE POLICY "Users can view search configurations in their workspace" ON search_configurations
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create search configurations in their workspace" ON search_configurations
    FOR INSERT WITH CHECK (
        workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()) AND
        user_id = auth.uid()
    );

CREATE POLICY "Users can update their own search configurations" ON search_configurations
    FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own search configurations" ON search_configurations
    FOR DELETE USING (user_id = auth.uid());

-- Company Profiles Policies
CREATE POLICY "Users can view company profiles in their workspace" ON company_profiles
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create company profiles in their workspace" ON company_profiles
    FOR INSERT WITH CHECK (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can update company profiles in their workspace" ON company_profiles
    FOR UPDATE USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

-- Prospect Profiles Policies
CREATE POLICY "Users can view prospect profiles in their workspace" ON prospect_profiles
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create prospect profiles in their workspace" ON prospect_profiles
    FOR INSERT WITH CHECK (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can update prospect profiles in their workspace" ON prospect_profiles
    FOR UPDATE USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

-- Search Results Policies
CREATE POLICY "Users can view search results in their workspace" ON search_results
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create search results in their workspace" ON search_results
    FOR INSERT WITH CHECK (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can update search results in their workspace" ON search_results
    FOR UPDATE USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

-- Search History Policies
CREATE POLICY "Users can view search history in their workspace" ON search_history
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create search history in their workspace" ON search_history
    FOR INSERT WITH CHECK (
        workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()) AND
        user_id = auth.uid()
    );

-- CSV Upload Sessions Policies
CREATE POLICY "Users can view their own CSV upload sessions" ON csv_upload_sessions
    FOR SELECT USING (
        workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()) AND
        user_id = auth.uid()
    );

CREATE POLICY "Users can create CSV upload sessions" ON csv_upload_sessions
    FOR INSERT WITH CHECK (
        workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()) AND
        user_id = auth.uid()
    );

CREATE POLICY "Users can update their own CSV upload sessions" ON csv_upload_sessions
    FOR UPDATE USING (user_id = auth.uid());

-- Prospect Campaign Assignments Policies
CREATE POLICY "Users can view prospect campaign assignments in their workspace" ON prospect_campaign_assignments
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create prospect campaign assignments in their workspace" ON prospect_campaign_assignments
    FOR INSERT WITH CHECK (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can update prospect campaign assignments in their workspace" ON prospect_campaign_assignments
    FOR UPDATE USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

-- Enrichment Queue Policies
CREATE POLICY "Users can view enrichment queue in their workspace" ON enrichment_queue
    FOR SELECT USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can create enrichment queue entries in their workspace" ON enrichment_queue
    FOR INSERT WITH CHECK (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

CREATE POLICY "Users can update enrichment queue in their workspace" ON enrichment_queue
    FOR UPDATE USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));

-- ============================================================================
-- FUNCTIONS AND TRIGGERS
-- ============================================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updated_at
CREATE TRIGGER update_search_configurations_updated_at BEFORE UPDATE ON search_configurations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_company_profiles_updated_at BEFORE UPDATE ON company_profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_prospect_profiles_updated_at BEFORE UPDATE ON prospect_profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_csv_upload_sessions_updated_at BEFORE UPDATE ON csv_upload_sessions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_enrichment_queue_updated_at BEFORE UPDATE ON enrichment_queue
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to calculate data completeness score
CREATE OR REPLACE FUNCTION calculate_prospect_completeness_score(
    p_email TEXT,
    p_phone TEXT,
    p_linkedin_url TEXT,
    p_current_title TEXT,
    p_current_company TEXT,
    p_location TEXT,
    p_experience JSONB,
    p_education JSONB
) RETURNS INTEGER AS $$
DECLARE
    score INTEGER := 0;
BEGIN
    -- Base information (40 points total)
    IF p_current_title IS NOT NULL AND p_current_title != '' THEN score := score + 10; END IF;
    IF p_current_company IS NOT NULL AND p_current_company != '' THEN score := score + 10; END IF;
    IF p_location IS NOT NULL AND p_location != '' THEN score := score + 10; END IF;
    IF p_linkedin_url IS NOT NULL AND p_linkedin_url != '' THEN score := score + 10; END IF;
    
    -- Contact information (40 points total)
    IF p_email IS NOT NULL AND p_email != '' THEN score := score + 25; END IF;
    IF p_phone IS NOT NULL AND p_phone != '' THEN score := score + 15; END IF;
    
    -- Professional background (20 points total)
    IF p_experience IS NOT NULL AND jsonb_array_length(p_experience) > 0 THEN score := score + 10; END IF;
    IF p_education IS NOT NULL AND jsonb_array_length(p_education) > 0 THEN score := score + 10; END IF;
    
    RETURN score;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-calculate completeness score
CREATE OR REPLACE FUNCTION update_prospect_completeness_score()
RETURNS TRIGGER AS $$
BEGIN
    NEW.data_completeness_score := calculate_prospect_completeness_score(
        NEW.email,
        NEW.phone,
        NEW.linkedin_url,
        NEW.current_title,
        NEW.current_company,
        NEW.location,
        NEW.experience,
        NEW.education
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_prospect_profiles_completeness_score 
    BEFORE INSERT OR UPDATE ON prospect_profiles
    FOR EACH ROW EXECUTE FUNCTION update_prospect_completeness_score();

-- ============================================================================
-- SAMPLE DATA (Optional - for testing)
-- ============================================================================

-- Insert sample search configuration
-- INSERT INTO search_configurations (workspace_id, user_id, name, search_type, search_parameters, linkedin_url)
-- VALUES (
--     '12345678-1234-1234-1234-123456789012'::uuid,
--     '87654321-4321-4321-4321-210987654321'::uuid,
--     'Tech CTOs in San Francisco',
--     'basic-search',
--     '{"keywords": "CTO", "location": "San Francisco", "industry": "Technology"}',
--     'https://www.linkedin.com/search/results/people/?keywords=CTO&geoUrn=San%20Francisco'
-- );

-- ============================================================================
-- COMMENTS AND DOCUMENTATION
-- ============================================================================

COMMENT ON TABLE search_configurations IS 'Stores user-defined search configurations for different LinkedIn search types';
COMMENT ON TABLE company_profiles IS 'Company information for follower searches and prospect enrichment';
COMMENT ON TABLE prospect_profiles IS 'Individual prospect data with enrichment and contact information';
COMMENT ON TABLE search_results IS 'Links prospects to their source searches with quality metrics';
COMMENT ON TABLE search_history IS 'Tracks search execution history with performance and cost data';
COMMENT ON TABLE csv_upload_sessions IS 'Manages CSV file upload and processing sessions';
COMMENT ON TABLE prospect_campaign_assignments IS 'Tracks assignment of prospects to marketing campaigns';
COMMENT ON TABLE enrichment_queue IS 'Manages background data enrichment tasks for prospects';

COMMENT ON COLUMN prospect_profiles.data_completeness_score IS 'Calculated score (0-100) based on available contact and professional information';
COMMENT ON COLUMN search_results.quality_score IS 'Relevance and quality score (0-100) for the prospect in context of the search';
COMMENT ON COLUMN search_history.estimated_cost IS 'Estimated cost in USD for the search execution';
COMMENT ON COLUMN search_history.actual_cost IS 'Actual cost in USD charged by Bright Data and other services';

-- Schema version and metadata
CREATE TABLE IF NOT EXISTS schema_migrations (
    version VARCHAR(255) PRIMARY KEY,
    applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

INSERT INTO schema_migrations (version) VALUES ('001_prospect_search_schema') 
ON CONFLICT (version) DO NOTHING;