// LinkedIn URL Generator Service
// Generated by LinkedIn Agent

import { 
  LinkedInSearchParameters, 
  CompanyFollowerSearchParameters,
  PostEngagementSearchParameters,
  GroupSearchParameters,
  EventSearchParameters,
  SearchType 
} from '@/types/prospect-search';

// Additional types for the service
export interface SearchUrlResult {
  url: string;
  isValid: boolean;
  errors?: string[];
  warnings?: string[];
  searchType?: SearchType;
  parameters?: any;
}

export interface LinkedInSearchParams extends LinkedInSearchParameters {
  country?: string;
  industryUrns?: string[];
  currentCompany?: string[];
  seniorityLevel?: string[];
  functionArea?: string[];
  companySize?: string[];
}

// ============================================================================
// LINKEDIN URL GENERATOR CLASS
// ============================================================================

export class LinkedInUrlGenerator {
  private static readonly BASE_URLS = {
    BASIC_SEARCH: 'https://www.linkedin.com/search/results/people/',
    SALES_NAVIGATOR: 'https://www.linkedin.com/sales/search/people',
    RECRUITER: 'https://www.linkedin.com/talent/search',
    COMPANY_PAGE: 'https://www.linkedin.com/company/',
    POST: 'https://www.linkedin.com/feed/update/',
    GROUP: 'https://www.linkedin.com/groups/',
    EVENT: 'https://www.linkedin.com/events/',
    MY_NETWORK: 'https://www.linkedin.com/mynetwork/invite-connect/connections/'
  };

  /**
   * Generate LinkedIn URL for any search type
   */
  static generateUrl(searchType: SearchType, parameters: any): SearchUrlResult {
    switch (searchType) {
      case 'basic-search':
        return this.generateBasicSearchUrl(parameters);
      case 'sales-navigator':
        return this.generateSalesNavigatorUrl(parameters);
      case 'recruiter-search':
        return this.generateRecruiterUrl(parameters);
      case 'company-follower':
        return this.generateCompanyFollowerUrl(parameters);
      case 'post-engagement':
        return this.generatePostEngagementUrl(parameters);
      case 'group-search':
        return this.generateGroupSearchUrl(parameters);
      case 'event-search':
        return this.generateEventSearchUrl(parameters);
      case 'people-you-know':
        return this.generatePeopleYouKnowUrl(parameters);
      default:
        return {
          url: '',
          isValid: false,
          errors: [`Unsupported search type: ${searchType}`],
          searchType
        };
    }
  }

  /**
   * Generate Basic LinkedIn Search URL
   */
  static generateBasicSearchUrl(params: LinkedInSearchParameters): SearchUrlResult {
    const urlParams = new URLSearchParams();
    const errors: string[] = [];
    const warnings: string[] = [];

    // Keywords and basic info
    if (params.keywords) urlParams.append('keywords', params.keywords);
    if (params.first_name) urlParams.append('firstName', params.first_name);
    if (params.last_name) urlParams.append('lastName', params.last_name);
    if (params.title) urlParams.append('title', params.title);
    if (params.company) urlParams.append('company', params.company);
    if (params.school) urlParams.append('school', params.school);

    // Location
    if (params.location) {
      urlParams.append('geoUrn', this.encodeLocation(params.location));
    }
    if (params.geoUrn) urlParams.append('geoUrn', params.geoUrn);

    // Industry filters
    if (params.industry && params.industry.length > 0) {
      params.industry.forEach(ind => urlParams.append('industry', this.encodeIndustry(ind)));
    }

    // Company filters
    if (params.current_company && params.current_company.length > 0) {
      params.current_company.forEach(comp => urlParams.append('currentCompany', comp));
    }
    if (params.past_company && params.past_company.length > 0) {
      params.past_company.forEach(comp => urlParams.append('pastCompany', comp));
    }

    // Experience level
    if (params.experience_level && params.experience_level.length > 0) {
      params.experience_level.forEach(level => urlParams.append('seniorityLevel', level));
    }

    // Profile language
    if (params.profile_language && params.profile_language.length > 0) {
      params.profile_language.forEach(lang => urlParams.append('profileLanguage', lang));
    }

    // Validation
    if (!params.keywords && !params.title && !params.company) {
      warnings.push('Search may be too broad without keywords, title, or company');
    }

    const url = `${this.BASE_URLS.BASIC_SEARCH}?${urlParams.toString()}`;
    
    return {
      url,
      isValid: errors.length === 0,
      errors: errors.length > 0 ? errors : undefined,
      warnings: warnings.length > 0 ? warnings : undefined,
      searchType: 'basic-search',
      parameters: params
    };
  }

  /**
   * Generate Sales Navigator Search URL
   */
  static generateSalesNavigatorUrl(params: LinkedInSearchParameters): SearchUrlResult {
    const urlParams = new URLSearchParams();

    // Basic parameters
    if (params.keywords) urlParams.append('keywords', params.keywords);
    if (params.title) urlParams.append('titleIncluded', params.title);
    if (params.company) urlParams.append('companyIncluded', params.company);

    // Location with Sales Navigator format
    if (params.location) {
      urlParams.append('geoIncluded', this.encodeSalesNavLocation(params.location));
    }

    // Industry (Sales Navigator specific)
    if (params.industry && params.industry.length > 0) {
      urlParams.append('industryIncluded', params.industry.join(','));
    }

    // Seniority Level (Sales Navigator specific)
    if (params.seniority_level && params.seniority_level.length > 0) {
      urlParams.append('seniorityIncluded', params.seniority_level.join(','));
    }

    // Function Area (Sales Navigator specific)
    if (params.function_area && params.function_area.length > 0) {
      urlParams.append('functionIncluded', params.function_area.join(','));
    }

    // Lead interests (Sales Navigator premium feature)
    if (params.lead_interests && params.lead_interests.length > 0) {
      urlParams.append('leadInterests', params.lead_interests.join(','));
    }

    // Company size
    if (params.company_size && params.company_size.length > 0) {
      urlParams.append('companySizeIncluded', params.company_size.join(','));
    }

    // Years of experience
    if (params.years_of_experience) {
      if (params.years_of_experience.min) {
        urlParams.append('yearsOfExperienceMin', params.years_of_experience.min.toString());
      }
      if (params.years_of_experience.max) {
        urlParams.append('yearsOfExperienceMax', params.years_of_experience.max.toString());
      }
    }

    const url = `${this.BASE_URLS.SALES_NAVIGATOR}?${urlParams.toString()}`;
    return {
      url,
      isValid: true,
      searchType: 'sales-navigator',
      parameters: params
    };
  }

  /**
   * Generate Recruiter Search URL
   */
  static generateRecruiterUrl(params: LinkedInSearchParameters): string {
    const urlParams = new URLSearchParams();

    // Basic search terms
    if (params.keywords) urlParams.append('keywords', params.keywords);
    if (params.title) urlParams.append('title', params.title);
    if (params.company) urlParams.append('company', params.company);

    // Location for recruiter
    if (params.location) {
      urlParams.append('location', this.encodeRecruiterLocation(params.location));
    }

    // Education filters
    if (params.school_filter && params.school_filter.length > 0) {
      params.school_filter.forEach(school => urlParams.append('school', school));
    }
    if (params.field_of_study && params.field_of_study.length > 0) {
      params.field_of_study.forEach(field => urlParams.append('fieldOfStudy', field));
    }

    // Recruiter specific filters
    if (params.willing_to_relocate) {
      urlParams.append('willingToRelocate', 'true');
    }
    if (params.open_to_opportunities) {
      urlParams.append('openToOpportunities', 'true');
    }
    if (params.talent_pool && params.talent_pool.length > 0) {
      urlParams.append('talentPool', params.talent_pool.join(','));
    }

    // Experience and seniority
    if (params.seniority_level && params.seniority_level.length > 0) {
      urlParams.append('seniority', params.seniority_level.join(','));
    }

    return `${this.BASE_URLS.RECRUITER}?${urlParams.toString()}`;
  }

  /**
   * Generate Company Follower Search URL
   */
  static generateCompanyFollowerUrl(params: CompanyFollowerSearchParameters): string {
    // Extract company identifier from URL
    const companyId = this.extractCompanyIdFromUrl(params.company_url);
    let baseUrl = `${this.BASE_URLS.COMPANY_PAGE}${companyId}/people/`;

    const urlParams = new URLSearchParams();
    
    if (params.follower_type && params.follower_type !== 'all') {
      urlParams.append('type', params.follower_type);
    }
    if (params.location_filter) {
      urlParams.append('location', params.location_filter);
    }
    if (params.title_filter) {
      urlParams.append('title', params.title_filter);
    }

    return urlParams.toString() ? `${baseUrl}?${urlParams.toString()}` : baseUrl;
  }

  /**
   * Generate Post Engagement URL
   */
  static generatePostEngagementUrl(params: PostEngagementSearchParameters): string {
    const postId = this.extractPostIdFromUrl(params.post_url);
    let baseUrl = `${this.BASE_URLS.POST}${postId}/`;

    const urlParams = new URLSearchParams();
    
    if (params.engagement_type && params.engagement_type !== 'all') {
      urlParams.append('type', params.engagement_type);
    }
    if (params.connection_filter && params.connection_filter !== 'all') {
      urlParams.append('connections', params.connection_filter);
    }
    if (params.author_filter) {
      urlParams.append('excludeAuthor', 'false');
    }

    return urlParams.toString() ? `${baseUrl}?${urlParams.toString()}` : baseUrl;
  }

  /**
   * Generate Group Search URL
   */
  static generateGroupSearchUrl(params: GroupSearchParameters): string {
    const groupId = this.extractGroupIdFromUrl(params.group_url);
    let baseUrl = `${this.BASE_URLS.GROUP}${groupId}/members/`;

    const urlParams = new URLSearchParams();
    
    if (params.member_type && params.member_type !== 'all') {
      urlParams.append('memberType', params.member_type);
    }
    if (params.role_filter && params.role_filter !== 'all') {
      urlParams.append('role', params.role_filter);
    }
    if (params.location_filter) {
      urlParams.append('location', params.location_filter);
    }

    return urlParams.toString() ? `${baseUrl}?${urlParams.toString()}` : baseUrl;
  }

  /**
   * Generate Event Search URL
   */
  static generateEventSearchUrl(params: EventSearchParameters): string {
    const eventId = this.extractEventIdFromUrl(params.event_url);
    let baseUrl = `${this.BASE_URLS.EVENT}${eventId}/attendees/`;

    const urlParams = new URLSearchParams();
    
    if (params.attendee_type && params.attendee_type !== 'all') {
      urlParams.append('type', params.attendee_type);
    }
    if (params.connection_filter && params.connection_filter !== 'all') {
      urlParams.append('connections', params.connection_filter);
    }

    return urlParams.toString() ? `${baseUrl}?${urlParams.toString()}` : baseUrl;
  }

  /**
   * Generate People You May Know URL
   */
  static generatePeopleYouKnowUrl(params: any): string {
    // This is typically accessed through the My Network page
    return this.BASE_URLS.MY_NETWORK;
  }

  // ============================================================================
  // URL PARSING METHODS
  // ============================================================================

  /**
   * Parse LinkedIn search URL to extract parameters
   */
  static parseUrl(url: string): { searchType: SearchType; parameters: any } {
    const urlObj = new URL(url);
    const pathname = urlObj.pathname;
    const searchParams = new URLSearchParams(urlObj.search);

    // Determine search type from URL
    if (pathname.includes('/search/results/people/')) {
      return {
        searchType: 'basic-search',
        parameters: this.parseBasicSearchParams(searchParams)
      };
    } else if (pathname.includes('/sales/search/people')) {
      return {
        searchType: 'sales-navigator',
        parameters: this.parseSalesNavParams(searchParams)
      };
    } else if (pathname.includes('/talent/search')) {
      return {
        searchType: 'recruiter-search',
        parameters: this.parseRecruiterParams(searchParams)
      };
    } else if (pathname.includes('/company/') && pathname.includes('/people/')) {
      return {
        searchType: 'company-follower',
        parameters: this.parseCompanyFollowerParams(url, searchParams)
      };
    } else if (pathname.includes('/feed/update/')) {
      return {
        searchType: 'post-engagement',
        parameters: this.parsePostEngagementParams(url, searchParams)
      };
    } else if (pathname.includes('/groups/') && pathname.includes('/members/')) {
      return {
        searchType: 'group-search',
        parameters: this.parseGroupParams(url, searchParams)
      };
    } else if (pathname.includes('/events/') && pathname.includes('/attendees/')) {
      return {
        searchType: 'event-search',
        parameters: this.parseEventParams(url, searchParams)
      };
    } else if (pathname.includes('/mynetwork/')) {
      return {
        searchType: 'people-you-know',
        parameters: {}
      };
    }

    throw new Error('Unable to parse LinkedIn URL: Unsupported URL format');
  }

  /**
   * Validate LinkedIn URL format
   */
  static validateUrl(url: string): { isValid: boolean; errors: string[]; warnings: string[] } {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      const urlObj = new URL(url);
      
      // Check if it's a LinkedIn URL
      if (!urlObj.hostname.includes('linkedin.com')) {
        errors.push('URL must be from linkedin.com domain');
      }

      // Check for specific URL patterns
      const pathname = urlObj.pathname;
      const validPatterns = [
        '/search/results/people/',
        '/sales/search/people',
        '/talent/search',
        '/company/',
        '/feed/update/',
        '/groups/',
        '/events/',
        '/mynetwork/'
      ];

      const isValidPattern = validPatterns.some(pattern => pathname.includes(pattern));
      if (!isValidPattern) {
        errors.push('URL does not match any supported LinkedIn search pattern');
      }

      // Check for common issues
      if (urlObj.search.length === 0 && !pathname.includes('/company/') && !pathname.includes('/mynetwork/')) {
        warnings.push('URL has no search parameters - results may be very broad');
      }

      return {
        isValid: errors.length === 0,
        errors,
        warnings
      };
    } catch (error) {
      return {
        isValid: false,
        errors: ['Invalid URL format'],
        warnings: []
      };
    }
  }

  // ============================================================================
  // HELPER METHODS
  // ============================================================================

  private static encodeLocation(location: string): string {
    // Map common locations to LinkedIn geo URNs
    const locationMap: { [key: string]: string } = {
      'san francisco': '90000084',
      'new york': '90000073',
      'los angeles': '90000057',
      'chicago': '90000021',
      'seattle': '90000110',
      'boston': '90000015',
      'austin': '90000010',
      'denver': '90000030',
      'atlanta': '90000009',
      'miami': '90000062',
      'dallas': '90000026',
      'houston': '90000047',
      'philadelphia': '90000091',
      'phoenix': '90000092',
      'san diego': '90000106',
      'washington dc': '90000074',
      'portland': '90000096',
      'minneapolis': '90000064',
      'detroit': '90000031',
      'nashville': '90000067'
    };

    const normalized = location.toLowerCase();
    return locationMap[normalized] || encodeURIComponent(location);
  }

  private static encodeIndustry(industry: string): string {
    // Map industries to LinkedIn industry IDs
    const industryMap: { [key: string]: string } = {
      'technology': '96',
      'software': '96',
      'healthcare': '14',
      'finance': '43',
      'financial services': '43',
      'education': '69',
      'marketing': '80',
      'consulting': '25',
      'real estate': '44',
      'retail': '27',
      'manufacturing': '25',
      'nonprofit': '94',
      'government': '75',
      'media': '28',
      'telecommunications': '8'
    };

    const normalized = industry.toLowerCase();
    return industryMap[normalized] || encodeURIComponent(industry);
  }

  private static encodeSalesNavLocation(location: string): string {
    // Sales Navigator uses different location encoding
    return `["${this.encodeLocation(location)}"]`;
  }

  private static encodeRecruiterLocation(location: string): string {
    // Recruiter uses yet another format
    return encodeURIComponent(location);
  }

  private static extractCompanyIdFromUrl(url: string): string {
    const match = url.match(/\/company\/([^\/]+)/);
    return match ? match[1] : '';
  }

  private static extractPostIdFromUrl(url: string): string {
    const match = url.match(/\/feed\/update\/([^\/\?]+)/);
    return match ? match[1] : '';
  }

  private static extractGroupIdFromUrl(url: string): string {
    const match = url.match(/\/groups\/([^\/]+)/);
    return match ? match[1] : '';
  }

  private static extractEventIdFromUrl(url: string): string {
    const match = url.match(/\/events\/([^\/]+)/);
    return match ? match[1] : '';
  }

  // ============================================================================
  // URL PARAMETER PARSERS
  // ============================================================================

  private static parseBasicSearchParams(params: URLSearchParams): LinkedInSearchParameters {
    return {
      keywords: params.get('keywords') || undefined,
      first_name: params.get('firstName') || undefined,
      last_name: params.get('lastName') || undefined,
      title: params.get('title') || undefined,
      company: params.get('company') || undefined,
      school: params.get('school') || undefined,
      location: params.get('geoUrn') || undefined,
      industry: params.getAll('industry').filter(Boolean),
      current_company: params.getAll('currentCompany').filter(Boolean),
      past_company: params.getAll('pastCompany').filter(Boolean),
      experience_level: params.getAll('seniorityLevel').filter(Boolean),
      profile_language: params.getAll('profileLanguage').filter(Boolean)
    };
  }

  private static parseSalesNavParams(params: URLSearchParams): LinkedInSearchParameters {
    return {
      keywords: params.get('keywords') || undefined,
      title: params.get('titleIncluded') || undefined,
      company: params.get('companyIncluded') || undefined,
      location: params.get('geoIncluded') || undefined,
      industry: params.get('industryIncluded')?.split(',').filter(Boolean),
      seniority_level: params.get('seniorityIncluded')?.split(',').filter(Boolean),
      function_area: params.get('functionIncluded')?.split(',').filter(Boolean),
      lead_interests: params.get('leadInterests')?.split(',').filter(Boolean),
      company_size: params.get('companySizeIncluded')?.split(',').filter(Boolean),
      years_of_experience: {
        min: params.get('yearsOfExperienceMin') ? parseInt(params.get('yearsOfExperienceMin')!) : undefined,
        max: params.get('yearsOfExperienceMax') ? parseInt(params.get('yearsOfExperienceMax')!) : undefined
      }
    };
  }

  private static parseRecruiterParams(params: URLSearchParams): LinkedInSearchParameters {
    return {
      keywords: params.get('keywords') || undefined,
      title: params.get('title') || undefined,
      company: params.get('company') || undefined,
      location: params.get('location') || undefined,
      school_filter: params.getAll('school').filter(Boolean),
      field_of_study: params.getAll('fieldOfStudy').filter(Boolean),
      willing_to_relocate: params.get('willingToRelocate') === 'true',
      open_to_opportunities: params.get('openToOpportunities') === 'true',
      talent_pool: params.get('talentPool')?.split(',').filter(Boolean),
      seniority_level: params.get('seniority')?.split(',').filter(Boolean)
    };
  }

  private static parseCompanyFollowerParams(url: string, params: URLSearchParams): CompanyFollowerSearchParameters {
    return {
      company_url: url,
      company_id: this.extractCompanyIdFromUrl(url),
      follower_type: params.get('type') as 'all' | 'employees' | 'non_employees' || 'all',
      location_filter: params.get('location') || undefined,
      title_filter: params.get('title') || undefined
    };
  }

  private static parsePostEngagementParams(url: string, params: URLSearchParams): PostEngagementSearchParameters {
    return {
      post_url: url,
      post_id: this.extractPostIdFromUrl(url),
      engagement_type: params.get('type') as 'likes' | 'comments' | 'shares' | 'all' || 'all',
      connection_filter: params.get('connections') as 'first' | 'second' | 'third' | 'all' || 'all',
      author_filter: params.get('excludeAuthor') !== 'true'
    };
  }

  private static parseGroupParams(url: string, params: URLSearchParams): GroupSearchParameters {
    return {
      group_url: url,
      group_id: this.extractGroupIdFromUrl(url),
      member_type: params.get('memberType') as 'all' | 'active' | 'new' || 'all',
      role_filter: params.get('role') as 'admin' | 'member' | 'all' || 'all',
      location_filter: params.get('location') || undefined
    };
  }

  private static parseEventParams(url: string, params: URLSearchParams): EventSearchParameters {
    return {
      event_url: url,
      event_id: this.extractEventIdFromUrl(url),
      attendee_type: params.get('type') as 'going' | 'interested' | 'all' || 'all',
      connection_filter: params.get('connections') as 'first' | 'second' | 'third' | 'all' || 'all'
    };
  }
}

// ============================================================================
// SEARCH OPTIMIZATION UTILITIES
// ============================================================================

export class LinkedInSearchOptimizer {
  /**
   * Optimize search parameters for better results
   */
  static optimizeSearchParameters(searchType: SearchType, params: any): {
    optimized_params: any;
    suggestions: string[];
    estimated_results: { min: number; max: number };
    difficulty_score: number;
  } {
    const suggestions: string[] = [];
    let optimized_params = { ...params };
    let difficulty_score = 0;

    switch (searchType) {
      case 'basic-search':
        return this.optimizeBasicSearch(optimized_params, suggestions);
      case 'sales-navigator':
        return this.optimizeSalesNavigator(optimized_params, suggestions);
      case 'recruiter-search':
        return this.optimizeRecruiter(optimized_params, suggestions);
      default:
        return {
          optimized_params,
          suggestions: ['No optimization available for this search type'],
          estimated_results: { min: 0, max: 1000 },
          difficulty_score: 50
        };
    }
  }

  private static optimizeBasicSearch(params: LinkedInSearchParameters, suggestions: string[]): any {
    let difficulty_score = 0;
    
    // Too broad search
    if (!params.keywords && !params.title && !params.company) {
      suggestions.push('Add keywords, title, or company name to narrow results');
      difficulty_score += 20;
    }

    // Very specific search
    if (params.keywords && params.title && params.company && params.location) {
      suggestions.push('Search might be too specific - consider removing some filters');
      difficulty_score += 30;
    }

    // Location optimization
    if (params.location && !params.location.includes('Area') && !params.location.includes('Greater')) {
      suggestions.push('Consider adding "Greater" or "Area" to location for broader reach');
    }

    // Keywords optimization
    if (params.keywords && params.keywords.length > 50) {
      suggestions.push('Keywords too long - shorter keywords usually perform better');
      difficulty_score += 10;
    }

    const estimated_results = this.estimateBasicSearchResults(params);
    
    return {
      optimized_params: params,
      suggestions,
      estimated_results,
      difficulty_score: Math.min(difficulty_score, 100)
    };
  }

  private static optimizeSalesNavigator(params: LinkedInSearchParameters, suggestions: string[]): any {
    let difficulty_score = 0;
    
    // Leverage Sales Navigator features
    if (!params.seniority_level || params.seniority_level.length === 0) {
      suggestions.push('Add seniority level filters for better targeting');
    }

    if (!params.function_area || params.function_area.length === 0) {
      suggestions.push('Add function area filters to improve relevance');
    }

    if (!params.company_size || params.company_size.length === 0) {
      suggestions.push('Add company size filters for better qualification');
    }

    // Too many filters
    const filterCount = [
      params.industry?.length || 0,
      params.seniority_level?.length || 0,
      params.function_area?.length || 0,
      params.company_size?.length || 0,
      params.lead_interests?.length || 0
    ].reduce((a, b) => a + b, 0);

    if (filterCount > 15) {
      suggestions.push('Too many filters might severely limit results');
      difficulty_score += 40;
    }

    const estimated_results = this.estimateSalesNavResults(params);
    
    return {
      optimized_params: params,
      suggestions,
      estimated_results,
      difficulty_score: Math.min(difficulty_score, 100)
    };
  }

  private static optimizeRecruiter(params: LinkedInSearchParameters, suggestions: string[]): any {
    let difficulty_score = 0;
    
    // Recruiter-specific optimizations
    if (!params.willing_to_relocate && !params.open_to_opportunities) {
      suggestions.push('Consider filtering for candidates open to opportunities');
    }

    if (!params.school_filter || params.school_filter.length === 0) {
      suggestions.push('Add education filters for better candidate quality');
    }

    const estimated_results = this.estimateRecruiterResults(params);
    
    return {
      optimized_params: params,
      suggestions,
      estimated_results,
      difficulty_score: Math.min(difficulty_score, 100)
    };
  }

  private static estimateBasicSearchResults(params: LinkedInSearchParameters): { min: number; max: number } {
    let multiplier = 1000; // Base estimate
    
    if (params.keywords) multiplier *= 0.3;
    if (params.title) multiplier *= 0.2;
    if (params.company) multiplier *= 0.1;
    if (params.location) multiplier *= 0.4;
    if (params.industry && params.industry.length > 0) multiplier *= 0.3;
    
    const min = Math.max(Math.floor(multiplier * 0.1), 1);
    const max = Math.floor(multiplier * 2);
    
    return { min, max: Math.min(max, 1000) };
  }

  private static estimateSalesNavResults(params: LinkedInSearchParameters): { min: number; max: number } {
    // Sales Navigator generally has more precise targeting
    const basic = this.estimateBasicSearchResults(params);
    return {
      min: Math.floor(basic.min * 0.3),
      max: Math.floor(basic.max * 0.6)
    };
  }

  private static estimateRecruiterResults(params: LinkedInSearchParameters): { min: number; max: number } {
    // Recruiter search typically has higher volume but less business focus
    const basic = this.estimateBasicSearchResults(params);
    return {
      min: Math.floor(basic.min * 0.8),
      max: Math.floor(basic.max * 1.5)
    };
  }
}

// ============================================================================
// SEARCH TEMPLATES
// ============================================================================

export const SEARCH_TEMPLATES = {
  'tech-executives': {
    name: 'Technology Executives',
    search_type: 'basic-search' as SearchType,
    parameters: {
      title: 'CTO OR VP Engineering OR Director Technology',
      industry: ['technology', 'software'],
      company_size: ['51-200', '201-500', '501-1000'],
      location: 'San Francisco Bay Area'
    }
  },
  'sales-leaders': {
    name: 'Sales Leadership',
    search_type: 'sales-navigator' as SearchType,
    parameters: {
      title: 'VP Sales OR Director Sales OR Head of Sales',
      seniority_level: ['senior', 'director', 'vp', 'cxo'],
      function_area: ['sales'],
      company_size: ['51-200', '201-500', '501-1000']
    }
  },
  'marketing-professionals': {
    name: 'Marketing Professionals',
    search_type: 'basic-search' as SearchType,
    parameters: {
      title: 'Marketing Manager OR Marketing Director',
      industry: ['marketing', 'advertising'],
      experience_level: ['mid-senior', 'senior']
    }
  },
  'startup-founders': {
    name: 'Startup Founders',
    search_type: 'basic-search' as SearchType,
    parameters: {
      title: 'Founder OR CEO OR Co-founder',
      company_size: ['1-10', '11-50'],
      industry: ['technology', 'software', 'internet']
    }
  },
  'healthcare-executives': {
    name: 'Healthcare Executives',
    search_type: 'sales-navigator' as SearchType,
    parameters: {
      title: 'CEO OR VP OR Director',
      industry: ['healthcare', 'medical devices', 'pharmaceuticals'],
      seniority_level: ['senior', 'director', 'vp', 'cxo']
    }
  }
};

// Utility object for LinkedIn URL operations
export const linkedInUrlUtils = {
  validateSearchUrl: (url: string, searchType?: string): { isValid: boolean; errors: string[] } => {
    const validation = LinkedInUrlGenerator.validateUrl(url);
    return {
      isValid: validation.isValid,
      errors: validation.errors
    };
  },
  parseUrl: LinkedInUrlGenerator.parseUrl,
  generateBasicSearchUrl: LinkedInUrlGenerator.generateBasicSearchUrl,
  generateSalesNavigatorUrl: LinkedInUrlGenerator.generateSalesNavigatorUrl,
  generateRecruiterUrl: (params: LinkedInSearchParameters): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generateRecruiterUrl(params);
    return { url, isValid: true, searchType: 'recruiter-search', parameters: params };
  },
  generateCompanyFollowerUrl: (params: CompanyFollowerSearchParameters): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generateCompanyFollowerUrl(params);
    return { url, isValid: true, searchType: 'company-follower', parameters: params };
  },
  generatePostEngagementUrl: (params: PostEngagementSearchParameters): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generatePostEngagementUrl(params);
    return { url, isValid: true, searchType: 'post-engagement', parameters: params };
  },
  generateGroupSearchUrl: (params: GroupSearchParameters): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generateGroupSearchUrl(params);
    return { url, isValid: true, searchType: 'group-search', parameters: params };
  },
  generateEventSearchUrl: (params: EventSearchParameters): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generateEventSearchUrl(params);
    return { url, isValid: true, searchType: 'event-search', parameters: params };
  },
  generatePeopleYouKnowUrl: (params: any): SearchUrlResult => {
    const url = LinkedInUrlGenerator.generatePeopleYouKnowUrl(params);
    return { url, isValid: true, searchType: 'people-you-know', parameters: params };
  }
};

export default LinkedInUrlGenerator;